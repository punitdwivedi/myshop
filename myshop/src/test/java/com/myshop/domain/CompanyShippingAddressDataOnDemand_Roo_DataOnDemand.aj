// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myshop.domain;

import com.myshop.domain.CompanyShippingAddress;
import com.myshop.domain.CompanyShippingAddressDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect CompanyShippingAddressDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CompanyShippingAddressDataOnDemand: @Component;
    
    private Random CompanyShippingAddressDataOnDemand.rnd = new SecureRandom();
    
    private List<CompanyShippingAddress> CompanyShippingAddressDataOnDemand.data;
    
    public CompanyShippingAddress CompanyShippingAddressDataOnDemand.getNewTransientCompanyShippingAddress(int index) {
        CompanyShippingAddress obj = new CompanyShippingAddress();
        setCity(obj, index);
        setContactPerson(obj, index);
        setCountry(obj, index);
        setStateName(obj, index);
        setStreet1(obj, index);
        setStreet2(obj, index);
        setTelephone(obj, index);
        setZip(obj, index);
        return obj;
    }
    
    public void CompanyShippingAddressDataOnDemand.setCity(CompanyShippingAddress obj, int index) {
        String city = "city_" + index;
        obj.setCity(city);
    }
    
    public void CompanyShippingAddressDataOnDemand.setContactPerson(CompanyShippingAddress obj, int index) {
        String contactPerson = "contactPerson_" + index;
        obj.setContactPerson(contactPerson);
    }
    
    public void CompanyShippingAddressDataOnDemand.setCountry(CompanyShippingAddress obj, int index) {
        String country = "country_" + index;
        obj.setCountry(country);
    }
    
    public void CompanyShippingAddressDataOnDemand.setStateName(CompanyShippingAddress obj, int index) {
        String stateName = "stateName_" + index;
        obj.setStateName(stateName);
    }
    
    public void CompanyShippingAddressDataOnDemand.setStreet1(CompanyShippingAddress obj, int index) {
        String street1 = "street1_" + index;
        obj.setStreet1(street1);
    }
    
    public void CompanyShippingAddressDataOnDemand.setStreet2(CompanyShippingAddress obj, int index) {
        String street2 = "street2_" + index;
        obj.setStreet2(street2);
    }
    
    public void CompanyShippingAddressDataOnDemand.setTelephone(CompanyShippingAddress obj, int index) {
        String telephone = "telephone_" + index;
        obj.setTelephone(telephone);
    }
    
    public void CompanyShippingAddressDataOnDemand.setZip(CompanyShippingAddress obj, int index) {
        Integer zip = new Integer(index);
        obj.setZip(zip);
    }
    
    public CompanyShippingAddress CompanyShippingAddressDataOnDemand.getSpecificCompanyShippingAddress(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CompanyShippingAddress obj = data.get(index);
        Long id = obj.getId();
        return CompanyShippingAddress.findCompanyShippingAddress(id);
    }
    
    public CompanyShippingAddress CompanyShippingAddressDataOnDemand.getRandomCompanyShippingAddress() {
        init();
        CompanyShippingAddress obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return CompanyShippingAddress.findCompanyShippingAddress(id);
    }
    
    public boolean CompanyShippingAddressDataOnDemand.modifyCompanyShippingAddress(CompanyShippingAddress obj) {
        return false;
    }
    
    public void CompanyShippingAddressDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = CompanyShippingAddress.findCompanyShippingAddressEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CompanyShippingAddress' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CompanyShippingAddress>();
        for (int i = 0; i < 10; i++) {
            CompanyShippingAddress obj = getNewTransientCompanyShippingAddress(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
