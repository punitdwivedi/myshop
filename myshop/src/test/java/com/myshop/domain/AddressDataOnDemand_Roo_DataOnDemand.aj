// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myshop.domain;

import com.myshop.domain.Address;
import com.myshop.domain.AddressDataOnDemand;
import com.myshop.domain.AddressTypeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AddressDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AddressDataOnDemand: @Component;
    
    private Random AddressDataOnDemand.rnd = new SecureRandom();
    
    private List<Address> AddressDataOnDemand.data;
    
    @Autowired
    AddressTypeDataOnDemand AddressDataOnDemand.addressTypeDataOnDemand;
    
    public Address AddressDataOnDemand.getNewTransientAddress(int index) {
        Address obj = new Address();
        setAddressLine1(obj, index);
        setAddressLine2(obj, index);
        setCity(obj, index);
        setContactPerson(obj, index);
        setCountryName(obj, index);
        setStateName(obj, index);
        setTelephone(obj, index);
        setZipCode(obj, index);
        return obj;
    }
    
    public void AddressDataOnDemand.setAddressLine1(Address obj, int index) {
        String addressLine1 = "addressLine1_" + index;
        obj.setAddressLine1(addressLine1);
    }
    
    public void AddressDataOnDemand.setAddressLine2(Address obj, int index) {
        String addressLine2 = "addressLine2_" + index;
        obj.setAddressLine2(addressLine2);
    }
    
    public void AddressDataOnDemand.setCity(Address obj, int index) {
        String city = "city_" + index;
        obj.setCity(city);
    }
    
    public void AddressDataOnDemand.setContactPerson(Address obj, int index) {
        String contactPerson = "contactPerson_" + index;
        obj.setContactPerson(contactPerson);
    }
    
    public void AddressDataOnDemand.setCountryName(Address obj, int index) {
        String countryName = "countryName_" + index;
        obj.setCountryName(countryName);
    }
    
    public void AddressDataOnDemand.setStateName(Address obj, int index) {
        String stateName = "stateName_" + index;
        obj.setStateName(stateName);
    }
    
    public void AddressDataOnDemand.setTelephone(Address obj, int index) {
        String telephone = "telephone_" + index;
        obj.setTelephone(telephone);
    }
    
    public void AddressDataOnDemand.setZipCode(Address obj, int index) {
        String zipCode = "zipCode_" + index;
        obj.setZipCode(zipCode);
    }
    
    public Address AddressDataOnDemand.getSpecificAddress(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Address obj = data.get(index);
        Long id = obj.getId();
        return Address.findAddress(id);
    }
    
    public Address AddressDataOnDemand.getRandomAddress() {
        init();
        Address obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Address.findAddress(id);
    }
    
    public boolean AddressDataOnDemand.modifyAddress(Address obj) {
        return false;
    }
    
    public void AddressDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Address.findAddressEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Address' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Address>();
        for (int i = 0; i < 10; i++) {
            Address obj = getNewTransientAddress(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
