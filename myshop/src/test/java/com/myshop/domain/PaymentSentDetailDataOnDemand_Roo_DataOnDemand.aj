// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.myshop.domain;

import com.myshop.domain.PaymentSentDataOnDemand;
import com.myshop.domain.PaymentSentDetail;
import com.myshop.domain.PaymentSentDetailDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PaymentSentDetailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PaymentSentDetailDataOnDemand: @Component;
    
    private Random PaymentSentDetailDataOnDemand.rnd = new SecureRandom();
    
    private List<PaymentSentDetail> PaymentSentDetailDataOnDemand.data;
    
    @Autowired
    PaymentSentDataOnDemand PaymentSentDetailDataOnDemand.paymentSentDataOnDemand;
    
    public PaymentSentDetail PaymentSentDetailDataOnDemand.getNewTransientPaymentSentDetail(int index) {
        PaymentSentDetail obj = new PaymentSentDetail();
        setAmount(obj, index);
        setInvoiceOrCreditNo(obj, index);
        return obj;
    }
    
    public void PaymentSentDetailDataOnDemand.setAmount(PaymentSentDetail obj, int index) {
        Double amount = new Integer(index).doubleValue();
        obj.setAmount(amount);
    }
    
    public void PaymentSentDetailDataOnDemand.setInvoiceOrCreditNo(PaymentSentDetail obj, int index) {
        String invoiceOrCreditNo = "invoiceOrCreditNo_" + index;
        obj.setInvoiceOrCreditNo(invoiceOrCreditNo);
    }
    
    public PaymentSentDetail PaymentSentDetailDataOnDemand.getSpecificPaymentSentDetail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PaymentSentDetail obj = data.get(index);
        Long id = obj.getId();
        return PaymentSentDetail.findPaymentSentDetail(id);
    }
    
    public PaymentSentDetail PaymentSentDetailDataOnDemand.getRandomPaymentSentDetail() {
        init();
        PaymentSentDetail obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return PaymentSentDetail.findPaymentSentDetail(id);
    }
    
    public boolean PaymentSentDetailDataOnDemand.modifyPaymentSentDetail(PaymentSentDetail obj) {
        return false;
    }
    
    public void PaymentSentDetailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PaymentSentDetail.findPaymentSentDetailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PaymentSentDetail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PaymentSentDetail>();
        for (int i = 0; i < 10; i++) {
            PaymentSentDetail obj = getNewTransientPaymentSentDetail(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
